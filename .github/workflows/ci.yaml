name: ci
on: pull_request
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.23.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: (set -o pipefail && go test -v -covermode=count -json ./... | tee test.json)
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.6.0
        with:
          test-results: test.json

  test:
    runs-on: ubuntu-latest
    # Define any services needed for the test suite (or delete this section)
    services:
      opensearch:
        image: opensearchproject/opensearch:2.11.0
        ports:
          - "9200:9200"
          - "9600:9600"
        options: >-
          --ulimit memlock=-1:-1
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 30
          --health-start-period 180s
        env:
          discovery.type: single-node
          plugins.security.disabled: false
          plugins.security.ssl.http.enabled: false
          plugins.security.ssl.transport.enabled: true
          plugins.security.allow_unsafe_democertificates: true
          plugins.security.allow_default_init_securityindex: true
          plugins.security.nodes_dn_dynamic_config_enabled: true
          plugins.security.audit.type: internal_opensearch
          plugins.security.enable_snapshot_restore_privilege: true
          plugins.security.check_snapshot_restore_write_privileges: true
          plugins.security.restapi.roles_enabled: "all_access,security_rest_api_access"
          bootstrap.memory_lock: true
          OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
    env:
      BATON_LOG_LEVEL: debug
      # Add any environment variables needed to run baton-opensearch
      BATON_OPENSEARCH_ADDRESS: "http://opensearch:9200"
      BATON_OPENSEARCH_USERNAME: "admin"
      BATON_OPENSEARCH_PASSWORD: "admin"
      BATON_OPENSEARCH_INSECURE_SKIP_VERIFY: "true"
      # The following parameters are passed to grant/revoke commands
      # Note: Grant/revoke tests will be skipped when security is disabled
      CONNECTOR_GRANT: 'grant:entitlement:role:test_role:assigned:user:test_user'
      CONNECTOR_ENTITLEMENT: 'entitlement:role:test_role:assigned'
      CONNECTOR_PRINCIPAL: 'user:test_user'
      CONNECTOR_PRINCIPAL_TYPE: 'user'
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      # Install any dependencies here (or delete this)
      # - name: Install postgres client
      #   run: sudo apt install postgresql-client
      # Run any fixture setup here (or delete this)
      # - name: Import sql into postgres
      #   run: psql -h localhost --user postgres -f environment.sql
      #   env:
      #     PGPASSWORD: secretpassword
      - name: Build baton-opensearch
        run: go build ./cmd/baton-opensearch
      - name: Get OpenSearch container name
        id: get_opensearch_container
        run: |
          cname=$(docker ps --format '{{.Names}}' --filter ancestor=opensearchproject/opensearch:2.11.0 | head -n 1)
          echo "container_name=$cname" >> $GITHUB_ENV
      - name: Wait for OpenSearch to be ready
        run: |
          echo "Waiting for OpenSearch to be ready..."
          timeout 120 bash -c 'until curl -f http://opensearch:9200/_cluster/health; do sleep 2; done'
      - name: Print OpenSearch logs on failure
        if: failure()
        run: |
          docker logs "$container_name" || true
      - name: List security certs in container
        run: docker exec "$container_name" ls -l /usr/share/opensearch/config/
      - name: Initialize OpenSearch security
        run: |
          echo "Initializing OpenSearch security plugin..."

          # Wait a bit more for OpenSearch to be fully ready
          sleep 10

          # Try to initialize security with retries
          for i in {1..15}; do
            echo "Attempt $i to initialize security..."
            if docker exec "$container_name" /usr/share/opensearch/plugins/opensearch-security/tools/securityadmin.sh \
              -cd /usr/share/opensearch/plugins/opensearch-security/securityconfig/ \
              -icl -key /usr/share/opensearch/config/kirk-key.pem \
              -cert /usr/share/opensearch/config/kirk.pem \
              -cacert /usr/share/opensearch/config/root-ca.pem \
              -nhnv; then
              echo "Security initialization successful"
              break
            else
              echo "Security initialization failed, attempt $i"
              if [ $i -eq 15 ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 15
            fi
          done
          
          # Verify security is properly initialized
          echo "Verifying security initialization..."
          timeout 60 bash -c 'until curl -f -u admin:admin http://opensearch:9200/_plugins/_security/api/health; do sleep 5; done'
      - name: Create test role and user
        run: |
          # Create a test role
          curl -X PUT -u admin:admin "http://opensearch:9200/_plugins/_security/api/roles/test_role" \
            -H "Content-Type: application/json" \
            -d '{
              "cluster_permissions": ["cluster_composite_ops"],
              "index_permissions": [{
                "index_patterns": ["*"],
                "allowed_actions": ["read"]
              }]
            }'

          # Create a test user
          curl -X PUT -u admin:admin "http://opensearch:9200/_plugins/_security/api/internalusers/test_user" \
            -H "Content-Type: application/json" \
            -d '{
              "password": "testpass",
              "backend_roles": ["test_role"]
            }'

          # Create a role mapping
          curl -X PUT -u admin:admin "http://opensearch:9200/_plugins/_security/api/rolesmapping/test_role" \
            -H "Content-Type: application/json" \
            -d '{
              "users": ["test_user"]
            }'
      - name: Run baton-opensearch
        run: ./baton-opensearch --address="${{ env.BATON_OPENSEARCH_ADDRESS }}" --username="${{ env.BATON_OPENSEARCH_USERNAME }}" --password="${{ env.BATON_OPENSEARCH_PASSWORD }}" --insecure-skip-verify="${{ env.BATON_OPENSEARCH_INSECURE_SKIP_VERIFY }}"

      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin

      - name: Check for grant before revoking

        run:
          baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""


      - name: Revoke grants
        run: ./baton-opensearch --revoke-grant="${{ env.CONNECTOR_GRANT }}"

      - name: Check grant was revoked
        run: ./baton-opensearch && baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status "if .grants then .grants[]?.principal.id.resource != \"${{ env.CONNECTOR_PRINCIPAL }}\" else . end"

      - name: Grant entitlement
        # Change the grant arguments to the correct IDs for your test data
        run: ./baton-opensearch --grant-entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --grant-principal="${{ env.CONNECTOR_PRINCIPAL }}" --grant-principal-type="${{ env.CONNECTOR_PRINCIPAL_TYPE }}"

      - name: Check grant was re-granted

        run:
          baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""

